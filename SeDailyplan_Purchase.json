{
  "name": "SeDailyplan Purchase",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! 👋\nI'm your Helpdesk assistance. How can I help you today?",
        "options": {}
      },
      "id": "aa6a5d51-6cef-45ba-9c94-8cf54a572fd3",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        300,
        -140
      ],
      "webhookId": "6fa1d8eb-6f33-4d6b-967a-6e1aedc0e707",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a SQL Server expert.\n\nStrictly exclude any columns not present in the schema. Do not guess, infer, or attempt substitutions. Use only columns that are both present in the schema and valid according to the previewed data.\n\nUse the following schema only:\n{{ $('Code1').all()[0].json.schemaText }}\n\nIf a requested column does not exist or cannot be confirmed, silently drop it.\n\nOnly use the following tables and columns:\n- PURCHASE_FCL_COST_INPUT (main table for FCL)\n- PURCHASE_FCL_SURCHARGE (secondary table for FCL)\n- PURCHASE_LCL_COST_INPUT (main table for LCL)\n- PURCHASE_LCL_SURCHARGE (secondary table for LCL)\n\nJOINs are allowed only between the main and secondary tables of the same type (e.g., FCL + FCL_SURCHARGE). Use JOINs only if it makes the result more complete.\n\nDo not include columns from the secondary table unless a JOIN is explicitly requested. Use only columns from the selected main table.\n\nDo not add conditions like CONTAINER_TYPE filters unless explicitly requested in the user’s query. Only use CONTAINER_TYPE in the WHERE clause if the request specifies container size or type.\n\nUse exact table and column names only from the schema above — do not guess, infer, or invent names.\n\nThe database is Microsoft SQL Server 2008:\n- Always use CONVERT instead of FORMAT.\n- Avoid subqueries inside aggregate functions — use JOINs instead.\n\nYou have access to preview data from the tool Microsoft SQL4. Use this to validate:\n- Whether the referenced table or column exists.\n- Whether the data type and format make sense for the condition.\nIf a condition does not match the column format, adapt the condition to match the expected type — but do not change the user’s wording or meaning.\n\nUse the most likely correct capitalization (e.g., 'Leam Chabang', 'Osaka') but match using LIKE for flexibility.\n\nSimulate or dry-run the logic in your head before generating the query.\n\n❗ Output only one valid SQL query — no markdown, no explanation, no formatting, and no duplicated versions.  \nOnly include one SQL query, using the most relevant and complete logic for the request. Do not include alternatives or variations.  \nNever repeat logic from previous context or memory. Only generate based on the current user request.\n\nNow generate one valid SQL query based on the following user request:\n",
              "role": "system"
            },
            {
              "content": "={{ $node[\"When chat message received\"].json[\"chatInput\"] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1740,
        580
      ],
      "id": "3874ce5d-3e96-43f2-9538-4bd485f1b24b",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT TABLE_NAME, COLUMN_NAME\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_SCHEMA = 'dbo'\n  AND TABLE_NAME IN (\n    'PURCHASE_FCL_COST_INPUT',\n    'PURCHASE_FCL_SURCHARGE',\n    'PURCHASE_LCL_COST_INPUT',\n    'PURCHASE_LCL_SURCHARGE'\n  )\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        820,
        -140
      ],
      "id": "78b3bf2f-02b7-4836-a638-3a01a993e1cb",
      "name": "Microsoft SQL",
      "credentials": {
        "microsoftSql": {
          "id": "zpEJUjV9I6pXFYUi",
          "name": "SeDailyplan-TEST"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "af244f1d-3f06-4cd2-be80-c9e59b2990b2",
              "name": "TABLE_NAME",
              "value": "={{ $json.TABLE_NAME }}",
              "type": "string"
            },
            {
              "id": "7788b93c-9e02-4d9b-9abc-943ff0e5ac9d",
              "name": "COLUMN_NAME",
              "value": "={{ $json.COLUMN_NAME }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1020,
        -140
      ],
      "id": "3d411adc-a23c-40bc-b86c-6a19f935dda8",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const schema = {};\n\nitems.forEach(item => {\n  const table = item.json.TABLE_NAME;\n  const column = item.json.COLUMN_NAME;\n\n  if (!schema[table]) {\n    schema[table] = [];\n  }\n\n  schema[table].push(column);\n});\n\nreturn [{\n  json: {\n    schema: schema\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        -140
      ],
      "id": "f881680d-ee50-4875-bc4b-1b45e056ea38",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "const schema = $json.schema;\nlet output = '';\n\nfor (const table in schema) {\n  output += `Table: ${table}\\n`;\n  schema[table].forEach(col => {\n    output += `  - ${col}\\n`;\n  });\n  output += '\\n';\n}\n\nreturn [{ json: { schemaText: output } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        220
      ],
      "id": "2dd29299-2f7d-497d-badd-7df95d6bc5ea",
      "name": "Code1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b5c8c749-c59c-43b3-8da8-243f0c6446d7",
              "leftValue": "={{ $json.message.content }}",
              "rightValue": "SELECT ",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2080,
        580
      ],
      "id": "1008a2e2-b5d3-4ca1-a9bb-02e4e8f474fc",
      "name": "If"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI assistant with access to memory stored in a variable called `storedRoutes`.\n\nYour job is to search through the storedRoutes array and return full data matching the user's request. For example:\n\n- If the user says: \"I want data from sc_no BKKN01359A\", search for objects where `SC_NO === 'BKKN01359A'` and return the full object.\n- If the user says: \"routes that go to Osaka\", return routes where any `PORT_OF_DISCHARGE` field contains \"Osaka\" (case-insensitive).\n- Respond clearly with the full matched object(s). Use readable formatting like a code block or JSON.\n\nDo NOT ask for confirmation. If data is found, display it directly.\n\nExample output:\nSure! Here's what I found for SC_NO BKKN01359A:\n\n  \"SC_NO\": \"BKKN01359A\",\n  \"CARRIER\": \"ONE\",\n  \"PORT_OF_DISCHARGE\": \"Osaka, Japan\",\n\n\nthis is a ser message:\n{{ $node[\"When chat message received\"].json[\"chatInput\"] }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1020,
        920
      ],
      "id": "831e6434-d3e4-4c3c-a4fe-1890f3c3ba7f",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1060,
        1140
      ],
      "id": "7e22d940-b87c-41c0-89a0-a7cb09c77984",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a strict database schema filter.\n\nOnly return `true` if the message refers to fields or structure inside the following schema:\n\nUse only these tables:\n- PURCHASE_FCL_COST_INPUT (main)\n- PURCHASE_FCL_SURCHARGE (secondary)\n- PURCHASE_LCL_COST_INPUT (main)\n- PURCHASE_LCL_SURCHARGE (secondary)\n\nSchema:\n{{ $('Code1').all()[0].json.schemaText }}\n\nMessage:\n{{ $node[\"When chat message received\"].json[\"chatInput\"] }}\n\nIf the message **only refers to memory**, **previous data**, or anything not clearly matching the schema or tables above, return `false`.\n\nReturn only one word: true or false.\n",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1300,
        280
      ],
      "id": "4c1335f4-0bb0-457a-b4e7-06aa53160d06",
      "name": "OpenAI1",
      "executeOnce": true,
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ece6387e-bc73-4aeb-add1-e465b8a18b3c",
              "leftValue": "={{ $json.message.content }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1320,
        600
      ],
      "id": "399e8432-9ce9-46c0-82bc-c6b4d0bb57cf",
      "name": "If1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": " {{ $('Code7').item.json.NewUUID }}",
        "contextWindowLength": 500000
      },
      "id": "03da6ecd-ea72-4411-a2b9-eb4528df66cc",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        1200,
        1180
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.message.content }}"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        2300,
        660
      ],
      "id": "dedd7ccb-2858-45cd-957c-0af4fb9cfd76",
      "name": "Microsoft SQL2",
      "credentials": {
        "microsoftSql": {
          "id": "zpEJUjV9I6pXFYUi",
          "name": "SeDailyplan-TEST"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.message.content}}\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        2300,
        520
      ],
      "id": "f7a08633-4856-445d-aafe-f4be7f3cdac1",
      "name": "Microsoft SQL1",
      "credentials": {
        "microsoftSql": {
          "id": "zpEJUjV9I6pXFYUi",
          "name": "SeDailyplan-TEST"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2500,
        600
      ],
      "id": "d3273c64-2675-41d6-8df4-c06557175960",
      "name": "Merge"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2720,
        700
      ],
      "id": "74a74bcb-0747-4c82-9453-ebca3faa8825",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2720,
        500
      ],
      "id": "b03bb068-a336-49a8-9e4a-ef42ba58a8ff",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "content": "SELECT TOP 1 * FROM [TableName]\n\n\n\nSELECT TABLE_NAME, COLUMN_NAME \nFROM INFORMATION_SCHEMA.COLUMNS \nWHERE TABLE_SCHEMA = 'dbo'"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -200,
        -140
      ],
      "id": "aa6f77c6-76ce-4c1a-88d3-1bf50b0dc94b",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "const tables = Object.entries($json.schema);\n\nreturn tables.map(([table, columns]) => {\n  const cols = columns.map(col => `[${col}]`).join(\", \");\n  return {\n    tableName: table,\n    query: `SELECT TOP 1 ${cols} FROM [${table}]`\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        360,
        400
      ],
      "id": "8bb71fbd-1d73-4ea8-832a-bb37bf2fbb31",
      "name": "Code2"
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "useDataOfInput": 2
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1100,
        280
      ],
      "id": "8b029300-d270-40f2-ba65-fd182c325fd0",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "const combined = $input.all().map(item => ({\n  tableName: item.json.tableName,\n  query: item.json.query\n}));\n\nreturn [{\n  json: {\n    sqlBatch: combined.map(q => q.query).join(\";\\n\")\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        400
      ],
      "id": "135ff652-1e52-473f-9679-3bbade30b1f4",
      "name": "Code3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $('Edit Fields2').item.json.sqlBatch }}\n"
      },
      "type": "n8n-nodes-base.microsoftSqlTool",
      "typeVersion": 1.1,
      "position": [
        2000,
        760
      ],
      "id": "310ccc96-af51-4a2d-9abb-4d83fba89df5",
      "name": "Microsoft SQL4",
      "credentials": {
        "microsoftSql": {
          "id": "zpEJUjV9I6pXFYUi",
          "name": "SeDailyplan-TEST"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c01f4b30-b00a-4a19-bdbe-ab88da72d2a1",
              "name": "sqlBatch",
              "value": "={{ $json.sqlBatch }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        800,
        400
      ],
      "id": "cf324f67-3a31-4c74-bc3f-f9e20a83351a",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  item.json.NewUUID = Date.now().toString(36) + Math.random().toString(36).substring(2);\n      }\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        -140
      ],
      "id": "7f71b5c2-2883-4766-aff7-f0212b036fd7",
      "name": "Code7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User message:\n{{ $node[\"When chat message received\"].json[\"chatInput\"] }}\n\nAI output:\n{{ JSON.stringify($json.data, null, 2) }}\n",
        "options": {
          "systemMessage": "store all these data in Simple Memory3 node"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2980,
        700
      ],
      "id": "bd38a222-7e0c-4e35-9e05-8f3c2f476090",
      "name": "AI Agent5"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "= {{ $('Code7').item.json.NewUUID }}",
        "contextWindowLength": 50000000
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3080,
        900
      ],
      "id": "0ae83215-15aa-489e-a06e-a2ef9cc7508d",
      "name": "Simple Memory3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2920,
        900
      ],
      "id": "d6a7fc9e-e6cd-4e58-80b9-f711b1c3b44d",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": " {{ $('Code7').item.json.NewUUID }}",
        "contextWindowLength": 500000
      },
      "id": "1b40f0f1-3bff-4033-bcf3-b34389d8b3b8",
      "name": "Simple Memory4",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        2760,
        -640
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2620,
        -640
      ],
      "id": "bf2586f2-a152-4682-ba63-54dd40b7eb9e",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $node[\"When chat message received\"].json[\"chatInput\"] }}",
        "options": {
          "systemMessage": "=You are a strict binary classifier.\n\nGoal: Decide if the user's message is a database schema-related question.\n\nStep 1: Check if the message refers to anything that can be answered using stored memory in `Simple Memory4` under the key `storedRoutes`. If it asks about previous data, stored SC_NO, or locations (like \"routes to Osaka\"), return `false`.\n\nStep 2: If it does not match memory and instead refers to the schema structure of the following tables, return `true`.\n\nOnly return `true` if the message refers to fields or structure from:\n- PURCHASE_FCL_COST_INPUT\n- PURCHASE_FCL_SURCHARGE\n- PURCHASE_LCL_COST_INPUT\n- PURCHASE_LCL_SURCHARGE\n\nSchema:\n{{ $('Code1').all()[0].json.schemaText }}\n\n\nReturn only: `true` or `false`\nDo not explain or add any extra words.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2660,
        -840
      ],
      "id": "52f8d54d-85dd-431e-8e96-ceac6033af4e",
      "name": "AI Agent6"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "= {{ $('Code7').item.json.NewUUID }}",
        "contextWindowLength": 500000
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3700,
        -720
      ],
      "id": "531df72e-0efc-4534-ac1c-cee0bdd61904",
      "name": "Simple Memory2"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "type": "user",
              "message": "={{ $node[\"When chat message received\"].json[\"chatInput\"] }}"
            },
            {
              "type": "ai",
              "message": "={{ $json.data }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        3740,
        -900
      ],
      "id": "f05932b5-37b7-4015-bddf-d7db6cd631ae",
      "name": "Chat Memory Manager"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://quickchart.io/chart/create",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"chart\": {\n    \"type\": \"table\",\n    \"data\": {\n      \"title\": \"Test Table\",\n      \"columns\": [\n        { \"title\": \"Name\", \"dataIndex\": \"name\" },\n        { \"title\": \"Age\", \"dataIndex\": \"age\" }\n      ],\n      \"dataSource\": [\n        { \"name\": \"Alice\", \"age\": 30 },\n        { \"name\": \"Bob\", \"age\": 25 }\n      ]\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6120,
        -460
      ],
      "id": "8d58f2a0-55ae-451c-885b-8677206fccf2",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "jsCode": "const rows = items[0].json.data;\nconst trimmed = rows.slice(0, 10);\n\nreturn [{\n  json: {\n    chart: {\n      type: \"table\",\n      data: {\n        title: \"Shipping Contract Table\",\n        columns: Object.keys(trimmed[0]).map(k => ({ title: k, dataIndex: k })),\n        dataSource: trimmed\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5900,
        -460
      ],
      "id": "ca43514b-b4ed-45c6-a5fb-ffd20cf746ea",
      "name": "Code6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01127794-df9a-4877-898c-47b3694c8b68",
              "name": "data",
              "value": "={{ $('Aggregate').item.json.data }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5620,
        -460
      ],
      "id": "cf66fc37-e7d6-4783-b4db-fcccc8800eb4",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0c6c02ec-be15-4990-95ff-76f63c0971fe",
              "name": "img",
              "value": "=<img src=\"{{ $json.tableImage }}\" alt=\"Shipping Table\" />",
              "type": "string"
            },
            {
              "id": "47d726ef-b18d-4652-ad06-f2e9b51fd9d8",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6420,
        -440
      ],
      "id": "e2449104-45f1-4da7-9ddd-daf7dda343f0",
      "name": "Edit Fields7"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        6540,
        -640
      ],
      "id": "a38b2509-ec32-4734-a636-02f619ad8621",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Return only this HTML and nothing else:\n{{ $json.img }}\n\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        6480,
        -860
      ],
      "id": "fce37ce1-03ce-4fa7-a30a-b77b8f367cb9",
      "name": "AI Agent4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0c6c02ec-be15-4990-95ff-76f63c0971fe",
              "name": "img",
              "value": "=<img src=\"{{ $json.url }}\" alt=\"Chart Image\" style=\"max-width: 100%;\n  height: auto;\"/>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6260,
        -860
      ],
      "id": "a3433e08-073c-4660-b566-8a7615825220",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "jsCode": "const parsed = JSON.parse($json.message.content);\nreturn [{\n  json: {\n    labels: parsed.labels,\n    data: parsed.data\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5840,
        -720
      ],
      "id": "88371975-dd51-48a8-ad2d-0aa4e3a91527",
      "name": "Code5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://quickchart.io/chart/create",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chart\": {\n    \"type\": \"bar\",\n    \"data\": {\n      \"labels\": [\"{{$json.labels.join(\"\\\",\\\"\")}}\"],\n      \"datasets\": [\n        {\n          \"label\": \"Ticket Count\",\n          \"data\": [\"{{$json.data.join(\"\\\",\\\"\")}}\"]\n        }\n      ]\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6040,
        -860
      ],
      "id": "49a0ebb8-46db-4db2-b38f-e9630e875a60",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.content }}",
                    "rightValue": "Bar",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "dcbad4d6-a61c-405b-be0c-bb482e201580"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2f595155-d2af-4482-8bfb-c87cf8f40a6b",
                    "leftValue": "={{ $json.message.content }}",
                    "rightValue": "Pie",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "03fba008-2335-4a67-b214-933f2ea0abc8",
                    "leftValue": "={{ $json.message.content }}",
                    "rightValue": "Table",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        5340,
        -880
      ],
      "id": "c1d47395-a8a9-440d-a752-7fea09a4fe3b",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "349185a6-731c-411c-acda-c784d1cff0f6",
              "name": "message.content",
              "value": "={{ $json.message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5120,
        -880
      ],
      "id": "beff625d-a244-4d8e-af6a-8c9926802dae",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        6460,
        -1000
      ],
      "id": "833abb7e-302c-4676-aa44-3e3fa8a77fa9",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Return only this HTML and nothing else:\n{{ $json.img }}\n\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        6480,
        -1200
      ],
      "id": "c6c04664-bf0a-4386-b294-26f7d3777bbf",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0c6c02ec-be15-4990-95ff-76f63c0971fe",
              "name": "img",
              "value": "=<img src=\"{{ $json.url }}\" alt=\"Chart Image\" style=\"max-width: 100%;\n  height: auto;\"/>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        6260,
        -1200
      ],
      "id": "35d631ac-02ea-414b-93ba-8eb9a61c133e",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "jsCode": "const parsed = JSON.parse($json.message.content);\nreturn [{\n  json: {\n    labels: parsed.labels,\n    data: parsed.data\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5840,
        -1060
      ],
      "id": "8e5f5a85-5928-4df7-9046-e63cfd54d814",
      "name": "Code4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://quickchart.io/chart/create",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chart\": {\n    \"type\": \"bar\",\n    \"data\": {\n      \"labels\": [\"{{$json.labels.join(\"\\\",\\\"\")}}\"],\n      \"datasets\": [\n        {\n          \"label\": \"Ticket Count\",\n          \"data\": [\"{{$json.data.join(\"\\\",\\\"\")}}\"]\n        }\n      ]\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6040,
        -1200
      ],
      "id": "9859be36-71bc-4dd6-8934-dffc273eff2e",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a data visualization assistant.\n\nBased on the JSON data provided, determine the best type of visualization to use.\n\nReturn only one of the following strings:\n- Bar\n- Pie\n- Table\n\nRules:\n- Return \"Table\" if each item has many fields or is descriptive/record-based (e.g., shipping contracts, rows of data).\n- Return \"Bar\" if the data is a comparison of numeric values across categories (e.g., count per type).\n- Return \"Pie\" if the data shows proportional parts of a whole (e.g., status distribution or percent share).\n\nInput:\n{{ JSON.stringify($json.data, null, 2) }}\n\nReturn only the word: `Bar`, `Pie`, or `Table`. No explanation.\n",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4760,
        -880
      ],
      "id": "f2a63119-15a6-4e38-a4cd-bd9eda50ffbc",
      "name": "OpenAI3",
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        3320,
        -680
      ],
      "id": "12d16863-143c-4c5c-9ed9-feb13a50d9cc",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3120,
        -680
      ],
      "id": "90db0a08-c5f0-4888-baee-085af385ccc3",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json[\"chatId\"] }}",
        "options": {
          "systemMessage": "=Return a JSON object with:\n\n- labels: all the keys of the first object (or aggregated PROCESS values)\n- data: their counts\n\nFormat:\n{\n  \"labels\": [...],\n  \"data\": [...]\n}\n\nExample output:\n{\n  \"labels\": [\"WAIT_APPROVE\", \"APPROVED\", \"REJECT\"],\n  \"data\": [30, 20, 5]\n}\n\nHere is the input:\n{{ JSON.stringify($json.data, null, 2) }}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        3200,
        -900
      ],
      "id": "6cd87e2e-50f6-4e15-98b8-2a74d7830789",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.message.content }}\n"
      },
      "type": "n8n-nodes-base.microsoftSqlTool",
      "typeVersion": 1.1,
      "position": [
        2220,
        -640
      ],
      "id": "96f869ca-22e6-4f5b-aa6f-2f7cd6ce2fb1",
      "name": "Microsoft SQL3",
      "credentials": {
        "microsoftSql": {
          "id": "zpEJUjV9I6pXFYUi",
          "name": "SeDailyplan-TEST"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2040,
        -700
      ],
      "id": "8db0ed1a-5826-4e01-b8f3-fbb171f8908f",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "2YLBZr8eqjmV05Nu",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $node[\"When chat message received\"].json[\"chatInput\"] }}",
        "options": {
          "systemMessage": "You are a SQL Server expert.\n\nOnly use the following schema to select valid tables and columns:\n{{ $('Code1').item.json.schemaText }}\n\nUse exact table and column names only from the schema above. Do not guess or invent any.\n\nThe database is running Microsoft SQL Server 2008. Always use CONVERT instead of FORMAT.\n\n❗ Do not use subqueries inside aggregate functions. Instead, use JOINs.\n\nReturn only a single valid SQL query. Do not explain or format it.\n\nNow generate a SQL query for this request:\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2100,
        -880
      ],
      "id": "322b8aa3-11d6-407e-8e3e-efe97af77db6",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "GPT-3.5-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a JSON expert and chart builder. I will provide dynamic JSON data (field names may vary). Your job is to:\n\n1. Detect the first object in the array (from the field below).\n2. Choose the first key as the x-axis label, and the second as the y-axis value.\n3. Create an HTML page using Chart.js to display a bar chart from the data.\n4. Return only a complete HTML file that I can paste into a browser.\n\nHere is the data:\n\n{{ JSON.stringify($json.data, null, 2) }}\n",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4280,
        -900
      ],
      "id": "2cb518f9-3ac7-4b5a-a4b5-603d7d040265",
      "name": "OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "Tzp0z4DcoKmAmbHE",
          "name": "OpeanAI"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Microsoft SQL1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Microsoft SQL2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Microsoft SQL1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "AI Agent5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        []
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL4": {
      "ai_tool": [
        [
          {
            "node": "OpenAI",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Microsoft SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory4": {
      "ai_memory": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI3": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL3": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2de1d367-c77c-4d6a-9744-ef72fb959f56",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "26a74bc05a0f48938d4721d1210f223d7de0402f654ce8967df782b7fd8fd87c"
  },
  "id": "iK7TBcrZduS6E5Dp",
  "tags": []
}